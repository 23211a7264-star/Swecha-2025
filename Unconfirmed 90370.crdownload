import React, { useEffect, useMemo, useRef, useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { Send, Bot, User, Plus, Trash2, Zap, Sparkles, Settings } from "lucide-react";

// Simple utility: timestamp
const nowTS = () => new Date().toLocaleString();

// Lightweight tokenizer
const toTokens = (s) => s.toLowerCase().replace(/[^a-z0-9\s]/g, " ").split(/\s+/).filter(Boolean);

// Tiny intent matcher (keyword + cosine-like overlap)
function matchIntent(input, intents) {
  const q = toTokens(input);
  let best = { key: "fallback", score: 0 };
  for (const [key, intent] of Object.entries(intents)) {
    if (!intent.keywords?.length && !intent.examples?.length) continue;
    let tokens = new Set([...(intent.keywords||[]).map(k=>k.toLowerCase())]);
    for (const ex of intent.examples||[]) ex.split(/\s+/).forEach(t=>tokens.add(t.toLowerCase()));
    const overlap = q.filter(t => tokens.has(t)).length;
    const score = overlap / Math.max(1, q.length);
    if (score > best.score) best = { key, score };
  }
  return best.key;
}

// Default intents & responses
const DEFAULT_INTENTS = {
  greeting: {
    keywords: ["hi","hello","hey","namaste","hola"],
    response: () => `Hey there! I\'m your on-page AI assistant. Ask me anything, or try the quick buttons below.`,
    examples: ["good morning","how are you"],
  },
  thanks: {
    keywords: ["thanks","thank","ty","thank you"],
    response: () => "Happy to help! Got anything else?",
    examples: ["appreciate it"],
  },
  help: {
    keywords: ["help","what can you do","features","capabilities"],
    response: () => (
      "I can answer FAQs you add, chit-chat a bit, and route by intent. Add your own Q&A under Settings → Custom FAQs."
    ),
  },
  smalltalk: {
    keywords: ["how are you","how's it going","what's up"],
    response: () => "I\'m running buttery-smooth ✨ What can I do for you today?",
  },
  ev_faq: {
    keywords: ["ev","charging","charger","slow","fast","dc","ac"],
    examples: ["difference between slow and fast charger","what is evse"],
    response: (q) => {
      const s = q.toLowerCase();
      if (s.includes("evse")) return "EVSE = Electric Vehicle Supply Equipment — the safe interface that manages power delivery, protection, comms, and billing between the grid and your EV.";
      if (s.includes("slow") && s.includes("fast")) return "Slow (AC, 2–7 kW) uses onboard charger — cheaper but longer. Fast (DC, 30–350 kW) bypasses onboard charger — quick top-ups, pricier hardware.";
      if (s.includes("range anxiety")) return "Range anxiety is the worry of running out of charge. Good planning, live maps, and reliable fast-charging reduce it.";
      return "Ask me EV charging basics like EVSE, slow vs fast, range anxiety, or charger block diagram.";
    },
  },
  time_date: {
    keywords: ["time","date","today","now"],
    response: () => `Right now it\'s ${nowTS()}.`,
  },
  fallback: {
    response: (q) => {
      const polite = [
        "I\'m not 100% sure yet — could you rephrase?",
        "I might not know that one. Try adding it as a Custom FAQ!",
        "Hmm, I\'m learning. Want to teach me via Settings → Custom FAQs?",
      ];
      return polite[Math.floor(Math.random()*polite.length)];
    }
  }
};

// Local storage helpers
const LS_KEY_FAQS = "miniChatbot.customFaqs.v1";
const readFaqs = () => {
  try { return JSON.parse(localStorage.getItem(LS_KEY_FAQS) || "[]"); } catch { return []; }
};
const writeFaqs = (faqs) => localStorage.setItem(LS_KEY_FAQS, JSON.stringify(faqs));

export default function ChatbotApp() {
  const [messages, setMessages] = useState([{
    role: "bot",
    text: "Hi! I\'m a zero-setup AI chatbot. Ask a question or click a quick prompt below. Add your own FAQs under Settings.",
    ts: nowTS(),
  }]);
  const [input, setInput] = useState("");
  const [faqs, setFaqs] = useState(readFaqs());
  const [openSettings, setOpenSettings] = useState(false);
  const [isThinking, setIsThinking] = useState(false);
  const endRef = useRef(null);

  useEffect(() => { endRef.current?.scrollIntoView({ behavior: "smooth" }); }, [messages, openSettings]);

  // Build intents including user FAQs
  const intents = useMemo(() => {
    const faqMap = Object.fromEntries(
      faqs.map((f, i) => [
        `userfaq_${i}`,
        {
          keywords: toTokens(`${f.q} ${f.tags||""}`),
          examples: [f.q],
          response: () => f.a,
        },
      ])
    );
    return { ...DEFAULT_INTENTS, ...faqMap };
  }, [faqs]);

  const send = async (text) => {
    if (!text.trim()) return;
    const userMsg = { role: "user", text, ts: nowTS() };
    setMessages((m) => [...m, userMsg]);
    setInput("");
    setIsThinking(true);

    // First try exact FAQ match
    const exact = faqs.find(f => f.q.trim().toLowerCase() === text.trim().toLowerCase());
    let botText;
    if (exact) {
      botText = exact.a;
    } else {
      const intent = matchIntent(text, intents);
      const handler = intents[intent]?.response || intents.fallback.response;
      botText = handler(text);

      // Very small similarity search on FAQs
      if (!exact) {
        const qTokens = toTokens(text);
        const scored = faqs.map((f, idx) => {
          const t = toTokens(f.q);
          const overlap = qTokens.filter(x => t.includes(x)).length;
          const score = overlap / Math.max(1, qTokens.length);
          return { idx, score };
        }).sort((a,b)=>b.score-a.score);
        if (scored[0]?.score >= 0.6) {
          botText += `\n\n(Closest saved FAQ: "${faqs[scored[0].idx].q}")`;
        }
      }
    }

    // simulate think time
    await new Promise(r=>setTimeout(r, 350));
    setIsThinking(false);
    setMessages((m) => [...m, { role: "bot", text: botText, ts: nowTS() }]);
  };

  const quicks = [
    "Hello!",
    "What can you do?",
    "What is EVSE?",
    "Difference between slow and fast charger",
    "What time is it?",
  ];

  // Settings: add/remove FAQs
  const addFaq = (q, a, tags="") => {
    const updated = [...faqs, { q, a, tags }];
    setFaqs(updated); writeFaqs(updated);
  };
  const removeFaq = (i) => { const updated = faqs.filter((_,idx)=>idx!==i); setFaqs(updated); writeFaqs(updated); };

  return (
    <div className="min-h-screen w-full bg-gradient-to-br from-slate-50 to-slate-100 text-slate-900 flex items-center justify-center p-4">
      <div className="w-full max-w-3xl grid gap-4">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div className="p-3 rounded-2xl bg-slate-900 text-white shadow"><Bot size={22}/></div>
            <div>
              <h1 className="text-2xl font-bold">AI Chatbot</h1>
              <p className="text-sm text-slate-500">No backend. Add your own FAQs. Instant deploy.</p>
            </div>
          </div>
          <button onClick={()=>setOpenSettings(v=>!v)} className="inline-flex items-center gap-2 px-3 py-2 rounded-2xl bg-white shadow hover:shadow-md border"><Settings size={16}/> Settings</button>
        </div>

        {/* Chat Window */}
        <div className="bg-white rounded-2xl shadow p-4 h-[60vh] overflow-y-auto">
          <div className="space-y-4">
            <AnimatePresence>
              {messages.map((m, i) => (
                <motion.div key={i}
                  initial={{ opacity: 0, y: 8 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -8 }}
                  className={`flex ${m.role === "user" ? "justify-end" : "justify-start"}`}
                >
                  <div className={`max-w-[80%] rounded-2xl px-3 py-2 shadow ${m.role === "user" ? "bg-slate-900 text-white" : "bg-slate-50"}`}>
                    <div className="text-xs opacity-60 mb-1">{m.role === "user" ? "You" : "Bot"} · {m.ts}</div>
                    <div className="whitespace-pre-wrap leading-relaxed">{m.text}</div>
                  </div>
                </motion.div>
              ))}
            </AnimatePresence>
            {isThinking && (
              <div className="flex items-center gap-2 text-slate-500 text-sm"><Sparkles size={16}/><span>Thinking…</span></div>
            )}
            <div ref={endRef} />
          </div>
        </div>

        {/* Quick prompts */}
        <div className="flex flex-wrap gap-2">
          {quicks.map((q, i) => (
            <button key={i} onClick={()=>send(q)} className="px-3 py-1 rounded-full bg-white border shadow text-sm hover:shadow-md">
              {q}
            </button>
          ))}
        </div>

        {/* Composer */}
        <div className="flex gap-2">
          <input
            className="flex-1 px-4 py-3 rounded-2xl border shadow bg-white focus:outline-none"
            placeholder="Type a message…"
            value={input}
            onChange={(e)=>setInput(e.target.value)}
            onKeyDown={(e)=>{ if(e.key === 'Enter' && !e.shiftKey){ e.preventDefault(); send(input);} }}
          />
          <button onClick={()=>send(input)} className="px-4 py-3 rounded-2xl bg-slate-900 text-white shadow hover:shadow-lg inline-flex items-center gap-2">
            <Send size={16}/> Send
          </button>
        </div>

        {/* Settings Panel */}
        {openSettings && (
          <div className="bg-white rounded-2xl shadow p-4 space-y-4">
            <div className="flex items-center gap-2"><Settings size={18}/><h2 className="font-semibold">Custom FAQs</h2></div>
            <FaqEditor onAdd={addFaq} />
            <div className="grid gap-2">
              {faqs.length === 0 && <p className="text-slate-500 text-sm">No FAQs yet. Add one above.</p>}
              {faqs.map((f, i) => (
                <div key={i} className="flex items-start justify-between gap-4 p-3 rounded-xl border bg-slate-50">
                  <div className="text-sm">
                    <div className="font-medium">Q: {f.q}</div>
                    <div className="text-slate-600">A: {f.a}</div>
                    {f.tags && <div className="text-xs mt-1 opacity-70">Tags: {f.tags}</div>}
                  </div>
                  <button onClick={()=>removeFaq(i)} className="p-2 rounded-xl bg-white border shadow hover:shadow-md"><Trash2 size={16}/></button>
                </div>
              ))}
            </div>

            <div className="text-xs text-slate-500">
              Pro tip: add synonyms in <em>Tags</em> (comma or space separated) so the matcher can find your FAQ.
            </div>

            <div className="text-xs text-slate-500 flex items-center gap-2"><Zap size={14}/> 
              This demo runs fully in the browser — no server, no API keys. You can embed it directly in your site.
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

function FaqEditor({ onAdd }) {
  const [q, setQ] = useState("");
  const [a, setA] = useState("");
  const [tags, setTags] = useState("");
  return (
    <div className="grid gap-2">
      <input className="px-3 py-2 rounded-xl border bg-white" placeholder="Question" value={q} onChange={e=>setQ(e.target.value)} />
      <textarea className="px-3 py-2 rounded-xl border bg-white min-h-[80px]" placeholder="Answer" value={a} onChange={e=>setA(e.target.value)} />
      <input className="px-3 py-2 rounded-xl border bg-white" placeholder="Tags (optional)" value={tags} onChange={e=>setTags(e.target.value)} />
      <div className="flex gap-2">
        <button
          className="px-3 py-2 rounded-xl bg-slate-900 text-white shadow hover:shadow-lg inline-flex items-center gap-2"
          onClick={()=>{ if(q.trim() && a.trim()){ onAdd(q.trim(), a.trim(), tags.trim()); setQ(""); setA(""); setTags(""); } }}
        >
          <Plus size={16}/> Add FAQ
        </button>
        <button
          className="px-3 py-2 rounded-xl bg-white border shadow hover:shadow-md"
          onClick={()=>{ setQ(""); setA(""); setTags(""); }}
        >
          Reset
        </button>
      </div>
    </div>
  );
}
